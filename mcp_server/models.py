# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:50:07+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ARN(RootModel[str]):
    root: str


class AccountId(RootModel[constr(pattern=r'^[0-9]{12}$')]):
    root: constr(pattern=r'^[0-9]{12}$')


class AlreadyExistsException(RootModel[Any]):
    root: Any


class BackupJobState(Enum):
    CREATED = 'CREATED'
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    ABORTING = 'ABORTING'
    ABORTED = 'ABORTED'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    EXPIRED = 'EXPIRED'
    PARTIAL = 'PARTIAL'


class BackupOptionKey(RootModel[constr(pattern=r'^[a-zA-Z0-9\-\_\.]{1,50}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9\-\_\.]{1,50}$')


class BackupOptionValue(RootModel[constr(pattern=r'^[a-zA-Z0-9\-\_\.]{1,50}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9\-\_\.]{1,50}$')


class BackupOptions(RootModel[Optional[Dict[str, BackupOptionValue]]]):
    root: Optional[Dict[str, BackupOptionValue]] = None


class BackupPlanName(RootModel[str]):
    root: str


class BackupRuleName(RootModel[constr(pattern=r'^[a-zA-Z0-9\-\_\.]{1,50}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9\-\_\.]{1,50}$')


class BackupSelectionName(RootModel[constr(pattern=r'^[a-zA-Z0-9\-\_\.]{1,50}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9\-\_\.]{1,50}$')


class BackupVaultEvent(Enum):
    BACKUP_JOB_STARTED = 'BACKUP_JOB_STARTED'
    BACKUP_JOB_COMPLETED = 'BACKUP_JOB_COMPLETED'
    BACKUP_JOB_SUCCESSFUL = 'BACKUP_JOB_SUCCESSFUL'
    BACKUP_JOB_FAILED = 'BACKUP_JOB_FAILED'
    BACKUP_JOB_EXPIRED = 'BACKUP_JOB_EXPIRED'
    RESTORE_JOB_STARTED = 'RESTORE_JOB_STARTED'
    RESTORE_JOB_COMPLETED = 'RESTORE_JOB_COMPLETED'
    RESTORE_JOB_SUCCESSFUL = 'RESTORE_JOB_SUCCESSFUL'
    RESTORE_JOB_FAILED = 'RESTORE_JOB_FAILED'
    COPY_JOB_STARTED = 'COPY_JOB_STARTED'
    COPY_JOB_SUCCESSFUL = 'COPY_JOB_SUCCESSFUL'
    COPY_JOB_FAILED = 'COPY_JOB_FAILED'
    RECOVERY_POINT_MODIFIED = 'RECOVERY_POINT_MODIFIED'
    BACKUP_PLAN_CREATED = 'BACKUP_PLAN_CREATED'
    BACKUP_PLAN_MODIFIED = 'BACKUP_PLAN_MODIFIED'
    S3_BACKUP_OBJECT_FAILED = 'S3_BACKUP_OBJECT_FAILED'
    S3_RESTORE_OBJECT_FAILED = 'S3_RESTORE_OBJECT_FAILED'


class BackupVaultEvents(RootModel[List[BackupVaultEvent]]):
    root: List[BackupVaultEvent]


class BackupVaultName(RootModel[constr(pattern=r'^[a-zA-Z0-9\-\_]{2,50}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9\-\_]{2,50}$')


class Boolean(RootModel[bool]):
    root: bool


class CancelLegalHoldInput(BaseModel):
    pass


class CancelLegalHoldOutput(BaseModel):
    pass


class ConditionKey(RootModel[str]):
    root: str


class ConditionType(Enum):
    STRINGEQUALS = 'STRINGEQUALS'


class ConditionValue(RootModel[str]):
    root: str


class ConflictException(RootModel[Any]):
    root: Any


class ControlName(RootModel[str]):
    root: str


class CopyJobState(Enum):
    CREATED = 'CREATED'
    RUNNING = 'RUNNING'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    PARTIAL = 'PARTIAL'


class CronExpression(RootModel[str]):
    root: str


class DeleteBackupPlanInput(BaseModel):
    pass


class DeleteBackupSelectionInput(BaseModel):
    pass


class DeleteBackupVaultAccessPolicyInput(BaseModel):
    pass


class DeleteBackupVaultInput(BaseModel):
    pass


class DeleteBackupVaultLockConfigurationInput(BaseModel):
    pass


class DeleteBackupVaultNotificationsInput(BaseModel):
    pass


class DeleteFrameworkInput(BaseModel):
    pass


class DeleteRecoveryPointInput(BaseModel):
    pass


class DeleteReportPlanInput(BaseModel):
    pass


class DependencyFailureException(RootModel[Any]):
    root: Any


class DescribeBackupJobInput(BaseModel):
    pass


class DescribeBackupVaultInput(BaseModel):
    pass


class DescribeCopyJobInput(BaseModel):
    pass


class DescribeFrameworkInput(BaseModel):
    pass


class DescribeGlobalSettingsInput(BaseModel):
    pass


class DescribeProtectedResourceInput(BaseModel):
    pass


class DescribeRecoveryPointInput(BaseModel):
    pass


class DescribeRegionSettingsInput(BaseModel):
    pass


class DescribeReportJobInput(BaseModel):
    pass


class DescribeReportPlanInput(BaseModel):
    pass


class DescribeRestoreJobInput(BaseModel):
    pass


class DisassociateRecoveryPointFromParentInput(BaseModel):
    pass


class DisassociateRecoveryPointInput(BaseModel):
    pass


class ExportBackupPlanTemplateInput(BaseModel):
    pass


class FrameworkDescription(
    RootModel[constr(pattern=r'.*\S.*', min_length=0, max_length=1024)]
):
    root: constr(pattern=r'.*\S.*', min_length=0, max_length=1024)


class FrameworkName(
    RootModel[constr(pattern=r'[a-zA-Z][_a-zA-Z0-9]*', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z][_a-zA-Z0-9]*', min_length=1, max_length=256)


class GetBackupPlanFromTemplateInput(BaseModel):
    pass


class GetBackupPlanInput(BaseModel):
    pass


class GetBackupSelectionInput(BaseModel):
    pass


class GetBackupVaultAccessPolicyInput(BaseModel):
    pass


class GetBackupVaultNotificationsInput(BaseModel):
    pass


class GetBackupVaultNotificationsOutput(BaseModel):
    BackupVaultArn: Optional[ARN] = None
    BackupVaultEvents_1: Optional[BackupVaultEvents] = Field(
        None, alias='BackupVaultEvents'
    )
    BackupVaultName_1: Optional[BackupVaultName] = Field(None, alias='BackupVaultName')
    SNSTopicArn: Optional[ARN] = None


class GetLegalHoldInput(BaseModel):
    pass


class GetRecoveryPointRestoreMetadataInput(BaseModel):
    pass


class GlobalSettingsName(RootModel[str]):
    root: str


class GlobalSettingsValue(RootModel[str]):
    root: str


class IAMPolicy(RootModel[str]):
    root: str


class IAMRoleArn(RootModel[str]):
    root: str


class InvalidParameterValueException(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class InvalidResourceStateException(RootModel[Any]):
    root: Any


class IsEnabled(RootModel[bool]):
    root: bool


class LegalHoldStatus(Enum):
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    CANCELING = 'CANCELING'
    CANCELED = 'CANCELED'


class LimitExceededException(RootModel[Any]):
    root: Any


class ListBackupJobsInput(BaseModel):
    pass


class ListBackupPlanTemplatesInput(BaseModel):
    pass


class ListBackupPlanVersionsInput(BaseModel):
    pass


class ListBackupPlansInput(BaseModel):
    pass


class ListBackupSelectionsInput(BaseModel):
    pass


class ListBackupVaultsInput(BaseModel):
    pass


class ListCopyJobsInput(BaseModel):
    pass


class ListFrameworksInput(BaseModel):
    pass


class ListLegalHoldsInput(BaseModel):
    pass


class ListProtectedResourcesInput(BaseModel):
    pass


class ListRecoveryPointsByBackupVaultInput(BaseModel):
    pass


class ListRecoveryPointsByLegalHoldInput(BaseModel):
    pass


class ListRecoveryPointsByResourceInput(BaseModel):
    pass


class ListReportJobsInput(BaseModel):
    pass


class ListReportPlansInput(BaseModel):
    pass


class ListRestoreJobsInput(BaseModel):
    pass


class ListTagsInput(BaseModel):
    pass


class Long(RootModel[int]):
    root: int


class MaxFrameworkInputs(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class MaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class MetadataKey(RootModel[str]):
    root: str


class MetadataValue(RootModel[str]):
    root: str


class MissingParameterValueException(RootModel[Any]):
    root: Any


class ParameterName(RootModel[str]):
    root: str


class ParameterValue(RootModel[str]):
    root: str


class PutBackupVaultAccessPolicyInput(BaseModel):
    Policy: Optional[IAMPolicy] = None


class PutBackupVaultLockConfigurationInput(BaseModel):
    ChangeableForDays: Optional[Long] = None
    MaxRetentionDays: Optional[Long] = None
    MinRetentionDays: Optional[Long] = None


class PutBackupVaultNotificationsInput(BaseModel):
    BackupVaultEvents_1: BackupVaultEvents = Field(..., alias='BackupVaultEvents')
    SNSTopicArn: ARN


class RecoveryPointMember(BaseModel):
    RecoveryPointArn: Optional[ARN] = None


class RecoveryPointStatus(Enum):
    COMPLETED = 'COMPLETED'
    PARTIAL = 'PARTIAL'
    DELETING = 'DELETING'
    EXPIRED = 'EXPIRED'


class RecoveryPointsList(RootModel[List[RecoveryPointMember]]):
    root: List[RecoveryPointMember]


class ReportJobId(RootModel[str]):
    root: str


class ReportPlanDescription(
    RootModel[constr(pattern=r'.*\S.*', min_length=0, max_length=1024)]
):
    root: constr(pattern=r'.*\S.*', min_length=0, max_length=1024)


class ReportPlanName(
    RootModel[constr(pattern=r'[a-zA-Z][_a-zA-Z0-9]*', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z][_a-zA-Z0-9]*', min_length=1, max_length=256)


class ResourceArns(RootModel[List[ARN]]):
    root: List[ARN]


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceType(RootModel[constr(pattern=r'^[a-zA-Z0-9\-\_\.]{1,50}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9\-\_\.]{1,50}$')


class ResourceTypeList(RootModel[List[ARN]]):
    root: List[ARN]


class ResourceTypeManagementPreference(RootModel[Optional[Dict[str, IsEnabled]]]):
    root: Optional[Dict[str, IsEnabled]] = None


class ResourceTypeOptInPreference(RootModel[Optional[Dict[str, IsEnabled]]]):
    root: Optional[Dict[str, IsEnabled]] = None


class ResourceTypes(RootModel[List[ResourceType]]):
    root: List[ResourceType]


class RestoreJobId(RootModel[str]):
    root: str


class RestoreJobStatus(Enum):
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    COMPLETED = 'COMPLETED'
    ABORTED = 'ABORTED'
    FAILED = 'FAILED'


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class StartReportJobOutput(BaseModel):
    ReportJobId_1: Optional[ReportJobId] = Field(None, alias='ReportJobId')


class StartRestoreJobOutput(BaseModel):
    RestoreJobId_1: Optional[RestoreJobId] = Field(None, alias='RestoreJobId')


class StopBackupJobInput(BaseModel):
    pass


class StorageClass(Enum):
    WARM = 'WARM'
    COLD = 'COLD'
    DELETED = 'DELETED'


class TagKey(RootModel[str]):
    root: str


class TagValue(RootModel[str]):
    root: str


class Tags(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class UpdateRegionSettingsInput(BaseModel):
    ResourceTypeManagementPreference_1: Optional[ResourceTypeManagementPreference] = (
        Field(None, alias='ResourceTypeManagementPreference')
    )
    ResourceTypeOptInPreference_1: Optional[ResourceTypeOptInPreference] = Field(
        None, alias='ResourceTypeOptInPreference'
    )


class WindowMinutes(RootModel[int]):
    root: int


class Integer(RootModel[int]):
    root: int


class String(RootModel[str]):
    root: str


class StringList(RootModel[List[String]]):
    root: List[String]


class StringMap(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class Timestamp(RootModel[datetime]):
    root: datetime


class AccountSettingsPutRequest(BaseModel):
    ResourceTypeManagementPreference: Optional[Dict[str, IsEnabled]] = Field(
        None,
        description='Enables or disables full Backup management of backups for a resource type. To enable full Backup management for DynamoDB along with <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/advanced-ddb-backup.html"> Backup\'s advanced DynamoDB backup features</a>, follow the procedure to <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/advanced-ddb-backup.html#advanced-ddb-backup-enable-cli"> enable advanced DynamoDB backup programmatically</a>.',
    )
    ResourceTypeOptInPreference: Optional[Dict[str, IsEnabled]] = Field(
        None,
        description='Updates the list of services along with the opt-in preferences for the Region.',
    )


class AuditReportJobsReportPlanNamePostRequest(BaseModel):
    IdempotencyToken: Optional[str] = Field(
        None,
        description='A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>StartReportJobInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.',
    )


class ReportSetting1(BaseModel):
    Accounts: Optional[StringList] = None
    FrameworkArns: Optional[StringList] = None
    NumberOfFrameworks: Optional[Integer] = None
    OrganizationUnits: Optional[StringList] = None
    Regions: Optional[StringList] = None
    ReportTemplate: Optional[String] = None


class Lifecycle(BaseModel):
    DeleteAfterDays: Optional[Long] = None
    MoveToColdStorageAfterDays: Optional[Long] = None


class BackupJobsPutRequest(BaseModel):
    BackupOptions: Optional[Dict[str, BackupOptionValue]] = Field(
        None,
        description='<p>Specifies the backup option for a selected resource. This option is only available for Windows Volume Shadow Copy Service (VSS) backup jobs.</p> <p>Valid values: Set to <code>"WindowsVSS":"enabled"</code> to enable the <code>WindowsVSS</code> backup option and create a Windows VSS backup. Set to <code>"WindowsVSS""disabled"</code> to create a regular backup. The <code>WindowsVSS</code> option is not enabled by default.</p>',
    )
    BackupVaultName: constr(pattern=r'^[a-zA-Z0-9\-\_]{2,50}$') = Field(
        ...,
        description='The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.',
    )
    CompleteWindowMinutes: Optional[int] = Field(
        None,
        description='A value in minutes during which a successfully started backup must complete, or else Backup will cancel the job. This value is optional. This value begins counting down from when the backup was scheduled. It does not add additional time for <code>StartWindowMinutes</code>, or if the backup started later than scheduled.',
    )
    IamRoleArn: str = Field(
        ...,
        description='Specifies the IAM role ARN used to create the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.',
    )
    IdempotencyToken: Optional[str] = Field(
        None,
        description='A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>StartBackupJob</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.',
    )
    Lifecycle_1: Optional[Lifecycle] = Field(
        None,
        alias='Lifecycle',
        description='<p>Contains an array of <code>Transition</code> objects specifying how long in days before a recovery point transitions to cold storage or is deleted.</p> <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold.</p> <p>Resource types that are able to be transitioned to cold storage are listed in the "Lifecycle to cold storage" section of the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource"> Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>',
    )
    RecoveryPointTags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='To help organize your resources, you can assign your own metadata to the resources that you create. Each tag is a key-value pair.',
    )
    ResourceArn: str = Field(
        ...,
        description='An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the resource type.',
    )
    StartWindowMinutes: Optional[int] = Field(
        None,
        description="A value in minutes after a backup is scheduled before a job will be canceled if it doesn't start successfully. This value is optional, and the default is 8 hours. If this value is included, it must be at least 60 minutes to avoid errors.",
    )


class State(Enum):
    CREATED = 'CREATED'
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    ABORTING = 'ABORTING'
    ABORTED = 'ABORTED'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    EXPIRED = 'EXPIRED'
    PARTIAL = 'PARTIAL'


class BackupVaultsBackupVaultNamePutRequest(BaseModel):
    BackupVaultTags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='Metadata that you can assign to help organize the resources that you create. Each tag is a key-value pair.',
    )
    CreatorRequestId: Optional[str] = Field(
        None,
        description="<p>A unique string that identifies the request and allows failed requests to be retried without the risk of running the operation twice. This parameter is optional.</p> <p>If used, this parameter must contain 1 to 50 alphanumeric or '-_.' characters.</p>",
    )
    EncryptionKeyArn: Optional[str] = Field(
        None,
        description='The server-side encryption key that is used to protect your backups; for example, <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.',
    )


class BackupVaultsBackupVaultNameAccessPolicyPutRequest(BaseModel):
    Policy: Optional[str] = Field(
        None, description='The backup vault access policy document in JSON format.'
    )


class BackupVaultsBackupVaultNameNotificationConfigurationPutRequest(BaseModel):
    BackupVaultEvents: List[BackupVaultEvent] = Field(
        ...,
        description='<p>An array of events that indicate the status of jobs to back up resources to the backup vault.</p> <p>For common use cases and code samples, see <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/sns-notifications.html">Using Amazon SNS to track Backup events</a>.</p> <p>The following events are supported:</p> <ul> <li> <p> <code>BACKUP_JOB_STARTED</code> | <code>BACKUP_JOB_COMPLETED</code> </p> </li> <li> <p> <code>COPY_JOB_STARTED</code> | <code>COPY_JOB_SUCCESSFUL</code> | <code>COPY_JOB_FAILED</code> </p> </li> <li> <p> <code>RESTORE_JOB_STARTED</code> | <code>RESTORE_JOB_COMPLETED</code> | <code>RECOVERY_POINT_MODIFIED</code> </p> </li> <li> <p> <code>S3_BACKUP_OBJECT_FAILED</code> | <code>S3_RESTORE_OBJECT_FAILED</code> </p> </li> </ul> <note> <p>The list below shows items that are deprecated events (for reference) and are no longer in use. They are no longer supported and will not return statuses or notifications. Refer to the list above for current supported events.</p> </note>',
    )
    SNSTopicArn: str = Field(
        ...,
        description='The Amazon Resource Name (ARN) that specifies the topic for a backup vault’s events; for example, <code>arn:aws:sns:us-west-2:111122223333:MyVaultTopic</code>.',
    )


class BackupVaultsBackupVaultNameRecoveryPointsRecoveryPointArnPostRequest(BaseModel):
    Lifecycle_1: Optional[Lifecycle] = Field(
        None,
        alias='Lifecycle',
        description='<p>Contains an array of <code>Transition</code> objects specifying how long in days before a recovery point transitions to cold storage or is deleted.</p> <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold.</p> <p>Resource types that are able to be transitioned to cold storage are listed in the "Lifecycle to cold storage" section of the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource"> Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>',
    )


class BackupVaultsBackupVaultNameVaultLockPutRequest(BaseModel):
    ChangeableForDays: Optional[int] = Field(
        None,
        description='<p>The Backup Vault Lock configuration that specifies the number of days before the lock date. For example, setting <code>ChangeableForDays</code> to 30 on Jan. 1, 2022 at 8pm UTC will set the lock date to Jan. 31, 2022 at 8pm UTC.</p> <p>Backup enforces a 72-hour cooling-off period before Vault Lock takes effect and becomes immutable. Therefore, you must set <code>ChangeableForDays</code> to 3 or greater.</p> <p>Before the lock date, you can delete Vault Lock from the vault using <code>DeleteBackupVaultLockConfiguration</code> or change the Vault Lock configuration using <code>PutBackupVaultLockConfiguration</code>. On and after the lock date, the Vault Lock becomes immutable and cannot be changed or deleted.</p> <p>If this parameter is not specified, you can delete Vault Lock from the vault using <code>DeleteBackupVaultLockConfiguration</code> or change the Vault Lock configuration using <code>PutBackupVaultLockConfiguration</code> at any time.</p>',
    )
    MaxRetentionDays: Optional[int] = Field(
        None,
        description="<p>The Backup Vault Lock configuration that specifies the maximum retention period that the vault retains its recovery points. This setting can be useful if, for example, your organization's policies require you to destroy certain data after retaining it for four years (1460 days).</p> <p>If this parameter is not included, Vault Lock does not enforce a maximum retention period on the recovery points in the vault. If this parameter is included without a value, Vault Lock will not enforce a maximum retention period.</p> <p>If this parameter is specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or shorter than the maximum retention period. If the job's retention period is longer than that maximum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault. The longest maximum retention period you can specify is 36500 days (approximately 100 years). Recovery points already saved in the vault prior to Vault Lock are not affected.</p>",
    )
    MinRetentionDays: Optional[int] = Field(
        None,
        description="<p>The Backup Vault Lock configuration that specifies the minimum retention period that the vault retains its recovery points. This setting can be useful if, for example, your organization's policies require you to retain certain data for at least seven years (2555 days).</p> <p>If this parameter is not specified, Vault Lock will not enforce a minimum retention period.</p> <p>If this parameter is specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or longer than the minimum retention period. If the job's retention period is shorter than that minimum retention period, then the vault fails that backup or copy job, and you should either modify your lifecycle settings or use a different vault. The shortest minimum retention period you can specify is 1 day. Recovery points already saved in the vault prior to Vault Lock are not affected.</p>",
    )


class BackupTemplateJsonToPlanPostRequest(BaseModel):
    BackupPlanTemplateJson: str = Field(
        ..., description='A customer-supplied backup plan document in JSON format.'
    )


class CopyJobsPutRequest(BaseModel):
    DestinationBackupVaultArn: str = Field(
        ...,
        description='An Amazon Resource Name (ARN) that uniquely identifies a destination backup vault to copy to; for example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.',
    )
    IamRoleArn: str = Field(
        ...,
        description='Specifies the IAM role ARN used to copy the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.',
    )
    IdempotencyToken: Optional[str] = Field(
        None,
        description='A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>StartCopyJob</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.',
    )
    Lifecycle_1: Optional[Lifecycle] = Field(
        None,
        alias='Lifecycle',
        description='<p>Contains an array of <code>Transition</code> objects specifying how long in days before a recovery point transitions to cold storage or is deleted.</p> <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold.</p> <p>Resource types that are able to be transitioned to cold storage are listed in the "Lifecycle to cold storage" section of the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource"> Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>',
    )
    RecoveryPointArn: str = Field(
        ...,
        description='An ARN that uniquely identifies a recovery point to use for the copy job; for example, arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45. ',
    )
    SourceBackupVaultName: constr(pattern=r'^[a-zA-Z0-9\-\_]{2,50}$') = Field(
        ...,
        description='The name of a logical source container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.',
    )


class State2(Enum):
    CREATED = 'CREATED'
    RUNNING = 'RUNNING'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    PARTIAL = 'PARTIAL'


class GlobalSettingsPutRequest(BaseModel):
    GlobalSettings: Optional[Dict[str, GlobalSettingsValue]] = Field(
        None,
        description='A value for <code>isCrossAccountBackupEnabled</code> and a Region. Example: <code>update-global-settings --global-settings isCrossAccountBackupEnabled=false --region us-west-2</code>.',
    )


class RestoreJobsPutRequest(BaseModel):
    IamRoleArn: Optional[str] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the IAM role that Backup uses to create the target resource; for example: <code>arn:aws:iam::123456789012:role/S3Access</code>.',
    )
    IdempotencyToken: Optional[str] = Field(
        None,
        description='A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>StartRestoreJob</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.',
    )
    Metadata: Dict[str, MetadataValue] = Field(
        ...,
        description='<p>A set of metadata key-value pairs. Contains information, such as a resource name, required to restore a recovery point.</p> <p> You can get configuration metadata about a resource at the time it was backed up by calling <code>GetRecoveryPointRestoreMetadata</code>. However, values in addition to those provided by <code>GetRecoveryPointRestoreMetadata</code> might be required to restore a resource. For example, you might need to provide a new resource name if the original already exists.</p> <p>You need to specify specific metadata to restore an Amazon Elastic File System (Amazon EFS) instance:</p> <ul> <li> <p> <code>file-system-id</code>: The ID of the Amazon EFS file system that is backed up by Backup. Returned in <code>GetRecoveryPointRestoreMetadata</code>.</p> </li> <li> <p> <code>Encrypted</code>: A Boolean value that, if true, specifies that the file system is encrypted. If <code>KmsKeyId</code> is specified, <code>Encrypted</code> must be set to <code>true</code>.</p> </li> <li> <p> <code>KmsKeyId</code>: Specifies the Amazon Web Services KMS key that is used to encrypt the restored file system. You can specify a key from another Amazon Web Services account provided that key it is properly shared with your account via Amazon Web Services KMS.</p> </li> <li> <p> <code>PerformanceMode</code>: Specifies the throughput mode of the file system.</p> </li> <li> <p> <code>CreationToken</code>: A user-supplied value that ensures the uniqueness (idempotency) of the request.</p> </li> <li> <p> <code>newFileSystem</code>: A Boolean value that, if true, specifies that the recovery point is restored to a new Amazon EFS file system.</p> </li> <li> <p> <code>ItemsToRestore</code>: An array of one to five strings where each string is a file path. Use <code>ItemsToRestore</code> to restore specific files or directories rather than the entire file system. This parameter is optional. For example, <code>"itemsToRestore":"[\\"/my.test\\"]"</code>.</p> </li> </ul>',
    )
    RecoveryPointArn: str = Field(
        ...,
        description='An ARN that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.',
    )
    ResourceType: Optional[constr(pattern=r'^[a-zA-Z0-9\-\_\.]{1,50}$')] = Field(
        None,
        description='<p>Starts a job to restore a recovery point for one of the following resources:</p> <ul> <li> <p> <code>Aurora</code> for Amazon Aurora</p> </li> <li> <p> <code>DocumentDB</code> for Amazon DocumentDB (with MongoDB compatibility)</p> </li> <li> <p> <code>DynamoDB</code> for Amazon DynamoDB</p> </li> <li> <p> <code>EBS</code> for Amazon Elastic Block Store</p> </li> <li> <p> <code>EC2</code> for Amazon Elastic Compute Cloud</p> </li> <li> <p> <code>EFS</code> for Amazon Elastic File System</p> </li> <li> <p> <code>FSx</code> for Amazon FSx</p> </li> <li> <p> <code>Neptune</code> for Amazon Neptune</p> </li> <li> <p> <code>RDS</code> for Amazon Relational Database Service</p> </li> <li> <p> <code>Storage Gateway</code> for Storage Gateway</p> </li> <li> <p> <code>S3</code> for Amazon S3</p> </li> <li> <p> <code>VirtualMachine</code> for virtual machines</p> </li> </ul>',
    )


class Status(Enum):
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    COMPLETED = 'COMPLETED'
    ABORTED = 'ABORTED'
    FAILED = 'FAILED'


class TagsResourceArnPostRequest(BaseModel):
    Tags: Dict[str, TagValue] = Field(
        ...,
        description='Key-value pairs that are used to help organize your resources. You can assign your own metadata to the resources you create. For clarity, this is the structure to assign tags: <code>[{"Key":"string","Value":"string"}]</code>.',
    )


class UntagResourceArnPostRequest(BaseModel):
    TagKeyList: List[String] = Field(
        ...,
        description='A list of keys to identify which key-value tags to remove from a resource.',
    )


class AdvancedBackupSetting(BaseModel):
    BackupOptions_1: Optional[BackupOptions] = Field(None, alias='BackupOptions')
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')


class AdvancedBackupSettings(RootModel[List[AdvancedBackupSetting]]):
    root: List[AdvancedBackupSetting]


class BackupJobChildJobsInState(RootModel[Optional[Dict[str, Long]]]):
    root: Optional[Dict[str, Long]] = None


class BackupPlanTemplatesListMember(BaseModel):
    BackupPlanTemplateId: Optional[String] = None
    BackupPlanTemplateName: Optional[String] = None


class BackupPlansListMember(BaseModel):
    AdvancedBackupSettings_1: Optional[AdvancedBackupSettings] = Field(
        None, alias='AdvancedBackupSettings'
    )
    BackupPlanArn: Optional[ARN] = None
    BackupPlanId: Optional[String] = None
    BackupPlanName_1: Optional[BackupPlanName] = Field(None, alias='BackupPlanName')
    CreationDate: Optional[Timestamp] = None
    CreatorRequestId: Optional[String] = None
    DeletionDate: Optional[Timestamp] = None
    LastExecutionDate: Optional[Timestamp] = None
    VersionId: Optional[String] = None


class BackupSelectionsListMember(BaseModel):
    BackupPlanId: Optional[String] = None
    CreationDate: Optional[Timestamp] = None
    CreatorRequestId: Optional[String] = None
    IamRoleArn: Optional[IAMRoleArn] = None
    SelectionId: Optional[String] = None
    SelectionName: Optional[BackupSelectionName] = None


class BackupVaultListMember(BaseModel):
    BackupVaultArn: Optional[ARN] = None
    BackupVaultName_1: Optional[BackupVaultName] = Field(None, alias='BackupVaultName')
    CreationDate: Optional[Timestamp] = None
    CreatorRequestId: Optional[String] = None
    EncryptionKeyArn: Optional[ARN] = None
    LockDate: Optional[Timestamp] = None
    Locked: Optional[Boolean] = None
    MaxRetentionDays: Optional[Long] = None
    MinRetentionDays: Optional[Long] = None
    NumberOfRecoveryPoints: Optional[Long] = None


class CalculatedLifecycle(BaseModel):
    DeleteAt: Optional[Timestamp] = None
    MoveToColdStorageAt: Optional[Timestamp] = None


class ComplianceResourceIdList(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=100, min_length=1)


class Condition(BaseModel):
    ConditionKey_1: ConditionKey = Field(..., alias='ConditionKey')
    ConditionType_1: ConditionType = Field(..., alias='ConditionType')
    ConditionValue_1: ConditionValue = Field(..., alias='ConditionValue')


class ConditionParameter(BaseModel):
    ConditionKey_1: Optional[ConditionKey] = Field(None, alias='ConditionKey')
    ConditionValue_1: Optional[ConditionValue] = Field(None, alias='ConditionValue')


class ConditionParameters(RootModel[List[ConditionParameter]]):
    root: List[ConditionParameter]


class Conditions(BaseModel):
    StringEquals: Optional[ConditionParameters] = None
    StringLike: Optional[ConditionParameters] = None
    StringNotEquals: Optional[ConditionParameters] = None
    StringNotLike: Optional[ConditionParameters] = None


class ControlInputParameter(BaseModel):
    ParameterName_1: Optional[ParameterName] = Field(None, alias='ParameterName')
    ParameterValue_1: Optional[ParameterValue] = Field(None, alias='ParameterValue')


class ControlInputParameters(RootModel[List[ControlInputParameter]]):
    root: List[ControlInputParameter]


class ControlScope(BaseModel):
    ComplianceResourceIds: Optional[ComplianceResourceIdList] = None
    ComplianceResourceTypes: Optional[ResourceTypeList] = None
    Tags: Optional[StringMap] = None


class CopyJobChildJobsInState(RootModel[Optional[Dict[str, Long]]]):
    root: Optional[Dict[str, Long]] = None


class CreateBackupPlanOutput(BaseModel):
    AdvancedBackupSettings_1: Optional[AdvancedBackupSettings] = Field(
        None, alias='AdvancedBackupSettings'
    )
    BackupPlanArn: Optional[ARN] = None
    BackupPlanId: Optional[String] = None
    CreationDate: Optional[Timestamp] = None
    VersionId: Optional[String] = None


class CreateBackupSelectionOutput(BaseModel):
    BackupPlanId: Optional[String] = None
    CreationDate: Optional[Timestamp] = None
    SelectionId: Optional[String] = None


class CreateBackupVaultInput(BaseModel):
    BackupVaultTags: Optional[Tags] = None
    CreatorRequestId: Optional[String] = None
    EncryptionKeyArn: Optional[ARN] = None


class CreateBackupVaultOutput(BaseModel):
    BackupVaultArn: Optional[ARN] = None
    BackupVaultName_1: Optional[BackupVaultName] = Field(None, alias='BackupVaultName')
    CreationDate: Optional[Timestamp] = None


class CreateFrameworkOutput(BaseModel):
    FrameworkArn: Optional[ARN] = None
    FrameworkName_1: Optional[FrameworkName] = Field(None, alias='FrameworkName')


class CreateReportPlanOutput(BaseModel):
    CreationTime: Optional[Timestamp] = None
    ReportPlanArn: Optional[ARN] = None
    ReportPlanName_1: Optional[ReportPlanName] = Field(None, alias='ReportPlanName')


class DateRange(BaseModel):
    FromDate: Timestamp
    ToDate: Timestamp


class DeleteBackupPlanOutput(BaseModel):
    BackupPlanArn: Optional[ARN] = None
    BackupPlanId: Optional[String] = None
    DeletionDate: Optional[Timestamp] = None
    VersionId: Optional[String] = None


class DescribeBackupVaultOutput(BaseModel):
    BackupVaultArn: Optional[ARN] = None
    BackupVaultName: Optional[String] = None
    CreationDate: Optional[Timestamp] = None
    CreatorRequestId: Optional[String] = None
    EncryptionKeyArn: Optional[ARN] = None
    LockDate: Optional[Timestamp] = None
    Locked: Optional[Boolean] = None
    MaxRetentionDays: Optional[Long] = None
    MinRetentionDays: Optional[Long] = None
    NumberOfRecoveryPoints: Optional[Long] = None


class DescribeProtectedResourceOutput(BaseModel):
    LastBackupTime: Optional[Timestamp] = None
    ResourceArn: Optional[ARN] = None
    ResourceName: Optional[String] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')


class DescribeRegionSettingsOutput(BaseModel):
    ResourceTypeManagementPreference_1: Optional[ResourceTypeManagementPreference] = (
        Field(None, alias='ResourceTypeManagementPreference')
    )
    ResourceTypeOptInPreference_1: Optional[ResourceTypeOptInPreference] = Field(
        None, alias='ResourceTypeOptInPreference'
    )


class DescribeRestoreJobOutput(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    BackupSizeInBytes: Optional[Long] = None
    CompletionDate: Optional[Timestamp] = None
    CreatedResourceArn: Optional[ARN] = None
    CreationDate: Optional[Timestamp] = None
    ExpectedCompletionTimeMinutes: Optional[Long] = None
    IamRoleArn: Optional[IAMRoleArn] = None
    PercentDone: Optional[String] = None
    RecoveryPointArn: Optional[ARN] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    RestoreJobId: Optional[String] = None
    Status: Optional[RestoreJobStatus] = None
    StatusMessage: Optional[String] = None


class ExportBackupPlanTemplateOutput(BaseModel):
    BackupPlanTemplateJson: Optional[String] = None


class FormatList(RootModel[List[String]]):
    root: List[String]


class Framework(BaseModel):
    CreationTime: Optional[Timestamp] = None
    DeploymentStatus: Optional[String] = None
    FrameworkArn: Optional[ARN] = None
    FrameworkDescription_1: Optional[FrameworkDescription] = Field(
        None, alias='FrameworkDescription'
    )
    FrameworkName_1: Optional[FrameworkName] = Field(None, alias='FrameworkName')
    NumberOfControls: Optional[Integer] = None


class FrameworkControl(BaseModel):
    ControlInputParameters_1: Optional[ControlInputParameters] = Field(
        None, alias='ControlInputParameters'
    )
    ControlName_1: ControlName = Field(..., alias='ControlName')
    ControlScope_1: Optional[ControlScope] = Field(None, alias='ControlScope')


class FrameworkControls(RootModel[List[FrameworkControl]]):
    root: List[FrameworkControl]


class FrameworkList(RootModel[List[Framework]]):
    root: List[Framework]


class GetBackupPlanFromJSONInput(BaseModel):
    BackupPlanTemplateJson: String


class GetBackupVaultAccessPolicyOutput(BaseModel):
    BackupVaultArn: Optional[ARN] = None
    BackupVaultName_1: Optional[BackupVaultName] = Field(None, alias='BackupVaultName')
    Policy: Optional[IAMPolicy] = None


class GetSupportedResourceTypesOutput(BaseModel):
    ResourceTypes_1: Optional[ResourceTypes] = Field(None, alias='ResourceTypes')


class GlobalSettings(RootModel[Optional[Dict[str, GlobalSettingsValue]]]):
    root: Optional[Dict[str, GlobalSettingsValue]] = None


class LegalHold(BaseModel):
    CancellationDate: Optional[Timestamp] = None
    CreationDate: Optional[Timestamp] = None
    Description: Optional[String] = None
    LegalHoldArn: Optional[ARN] = None
    LegalHoldId: Optional[String] = None
    Status: Optional[LegalHoldStatus] = None
    Title: Optional[String] = None


class LegalHoldsList(RootModel[List[LegalHold]]):
    root: List[LegalHold]


class ListFrameworksOutput(BaseModel):
    Frameworks: Optional[FrameworkList] = None
    NextToken: Optional[String] = None


class ListLegalHoldsOutput(BaseModel):
    LegalHolds: Optional[LegalHoldsList] = None
    NextToken: Optional[String] = None


class ListOfTags(RootModel[List[Condition]]):
    root: List[Condition]


class ListRecoveryPointsByLegalHoldOutput(BaseModel):
    NextToken: Optional[String] = None
    RecoveryPoints: Optional[RecoveryPointsList] = None


class ListTagsOutput(BaseModel):
    NextToken: Optional[String] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class Metadata(RootModel[Optional[Dict[str, MetadataValue]]]):
    root: Optional[Dict[str, MetadataValue]] = None


class ProtectedResource(BaseModel):
    LastBackupTime: Optional[Timestamp] = None
    ResourceArn: Optional[ARN] = None
    ResourceName: Optional[String] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')


class ProtectedResourcesList(RootModel[List[ProtectedResource]]):
    root: List[ProtectedResource]


class RecoveryPointByResource(BaseModel):
    BackupSizeBytes: Optional[Long] = None
    BackupVaultName_1: Optional[BackupVaultName] = Field(None, alias='BackupVaultName')
    CreationDate: Optional[Timestamp] = None
    EncryptionKeyArn: Optional[ARN] = None
    IsParent: Optional[Boolean] = None
    ParentRecoveryPointArn: Optional[ARN] = None
    RecoveryPointArn: Optional[ARN] = None
    ResourceName: Optional[String] = None
    Status: Optional[RecoveryPointStatus] = None
    StatusMessage: Optional[String] = None


class RecoveryPointByResourceList(RootModel[List[RecoveryPointByResource]]):
    root: List[RecoveryPointByResource]


class RecoveryPointCreator(BaseModel):
    BackupPlanArn: Optional[ARN] = None
    BackupPlanId: Optional[String] = None
    BackupPlanVersion: Optional[String] = None
    BackupRuleId: Optional[String] = None


class ReportDeliveryChannel(BaseModel):
    Formats: Optional[FormatList] = None
    S3BucketName: String
    S3KeyPrefix: Optional[String] = None


class ReportDestination(BaseModel):
    S3BucketName: Optional[String] = None
    S3Keys: Optional[StringList] = None


class ReportJob(BaseModel):
    CompletionTime: Optional[Timestamp] = None
    CreationTime: Optional[Timestamp] = None
    ReportDestination_1: Optional[ReportDestination] = Field(
        None, alias='ReportDestination'
    )
    ReportJobId_1: Optional[ReportJobId] = Field(None, alias='ReportJobId')
    ReportPlanArn: Optional[ARN] = None
    ReportTemplate: Optional[String] = None
    Status: Optional[String] = None
    StatusMessage: Optional[String] = None


class ReportJobList(RootModel[List[ReportJob]]):
    root: List[ReportJob]


class ReportSetting(BaseModel):
    Accounts: Optional[StringList] = None
    FrameworkArns: Optional[StringList] = None
    NumberOfFrameworks: Optional[Integer] = None
    OrganizationUnits: Optional[StringList] = None
    Regions: Optional[StringList] = None
    ReportTemplate: String


class ResourceIdentifiers(RootModel[List[String]]):
    root: List[String]


class RestoreJobsListMember(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    BackupSizeInBytes: Optional[Long] = None
    CompletionDate: Optional[Timestamp] = None
    CreatedResourceArn: Optional[ARN] = None
    CreationDate: Optional[Timestamp] = None
    ExpectedCompletionTimeMinutes: Optional[Long] = None
    IamRoleArn: Optional[IAMRoleArn] = None
    PercentDone: Optional[String] = None
    RecoveryPointArn: Optional[ARN] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    RestoreJobId: Optional[String] = None
    Status: Optional[RestoreJobStatus] = None
    StatusMessage: Optional[String] = None


class StartBackupJobInput(BaseModel):
    BackupOptions_1: Optional[BackupOptions] = Field(None, alias='BackupOptions')
    BackupVaultName_1: BackupVaultName = Field(..., alias='BackupVaultName')
    CompleteWindowMinutes: Optional[WindowMinutes] = None
    IamRoleArn: IAMRoleArn
    IdempotencyToken: Optional[String] = None
    Lifecycle_1: Optional[Lifecycle] = Field(None, alias='Lifecycle')
    RecoveryPointTags: Optional[Tags] = None
    ResourceArn: ARN
    StartWindowMinutes: Optional[WindowMinutes] = None


class StartBackupJobOutput(BaseModel):
    BackupJobId: Optional[String] = None
    CreationDate: Optional[Timestamp] = None
    IsParent: Optional[Boolean] = None
    RecoveryPointArn: Optional[ARN] = None


class StartCopyJobInput(BaseModel):
    DestinationBackupVaultArn: ARN
    IamRoleArn: IAMRoleArn
    IdempotencyToken: Optional[String] = None
    Lifecycle_1: Optional[Lifecycle] = Field(None, alias='Lifecycle')
    RecoveryPointArn: ARN
    SourceBackupVaultName: BackupVaultName


class StartCopyJobOutput(BaseModel):
    CopyJobId: Optional[String] = None
    CreationDate: Optional[Timestamp] = None
    IsParent: Optional[Boolean] = None


class StartReportJobInput(BaseModel):
    IdempotencyToken: Optional[String] = None


class StartRestoreJobInput(BaseModel):
    IamRoleArn: Optional[IAMRoleArn] = None
    IdempotencyToken: Optional[String] = None
    Metadata_1: Metadata = Field(..., alias='Metadata')
    RecoveryPointArn: ARN
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')


class TagKeyList(RootModel[List[String]]):
    root: List[String]


class TagResourceInput(BaseModel):
    Tags_1: Tags = Field(..., alias='Tags')


class UntagResourceInput(BaseModel):
    TagKeyList_1: TagKeyList = Field(..., alias='TagKeyList')


class UpdateBackupPlanOutput(BaseModel):
    AdvancedBackupSettings_1: Optional[AdvancedBackupSettings] = Field(
        None, alias='AdvancedBackupSettings'
    )
    BackupPlanArn: Optional[ARN] = None
    BackupPlanId: Optional[String] = None
    CreationDate: Optional[Timestamp] = None
    VersionId: Optional[String] = None


class UpdateFrameworkInput(BaseModel):
    FrameworkControls_1: Optional[FrameworkControls] = Field(
        None, alias='FrameworkControls'
    )
    FrameworkDescription_1: Optional[FrameworkDescription] = Field(
        None, alias='FrameworkDescription'
    )
    IdempotencyToken: Optional[String] = None


class UpdateFrameworkOutput(BaseModel):
    CreationTime: Optional[Timestamp] = None
    FrameworkArn: Optional[ARN] = None
    FrameworkName_1: Optional[FrameworkName] = Field(None, alias='FrameworkName')


class UpdateGlobalSettingsInput(BaseModel):
    GlobalSettings_1: Optional[GlobalSettings] = Field(None, alias='GlobalSettings')


class UpdateRecoveryPointLifecycleInput(BaseModel):
    Lifecycle_1: Optional[Lifecycle] = Field(None, alias='Lifecycle')


class UpdateRecoveryPointLifecycleOutput(BaseModel):
    BackupVaultArn: Optional[ARN] = None
    CalculatedLifecycle_1: Optional[CalculatedLifecycle] = Field(
        None, alias='CalculatedLifecycle'
    )
    Lifecycle_1: Optional[Lifecycle] = Field(None, alias='Lifecycle')
    RecoveryPointArn: Optional[ARN] = None


class UpdateReportPlanInput(BaseModel):
    IdempotencyToken: Optional[String] = None
    ReportDeliveryChannel_1: Optional[ReportDeliveryChannel] = Field(
        None, alias='ReportDeliveryChannel'
    )
    ReportPlanDescription_1: Optional[ReportPlanDescription] = Field(
        None, alias='ReportPlanDescription'
    )
    ReportSetting_1: Optional[ReportSetting] = Field(None, alias='ReportSetting')


class UpdateReportPlanOutput(BaseModel):
    CreationTime: Optional[Timestamp] = None
    ReportPlanArn: Optional[ARN] = None
    ReportPlanName_1: Optional[ReportPlanName] = Field(None, alias='ReportPlanName')


class VaultNames(RootModel[List[String]]):
    root: List[String]


class AuditFrameworksPostRequest(BaseModel):
    FrameworkControls: List[FrameworkControl] = Field(
        ...,
        description='A list of the controls that make up the framework. Each control in the list has a name, input parameters, and scope.',
    )
    FrameworkDescription: Optional[
        constr(pattern=r'.*\S.*', min_length=0, max_length=1024)
    ] = Field(
        None,
        description='An optional description of the framework with a maximum of 1,024 characters.',
    )
    FrameworkName: constr(
        pattern=r'[a-zA-Z][_a-zA-Z0-9]*', min_length=1, max_length=256
    ) = Field(
        ...,
        description='The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).',
    )
    FrameworkTags: Optional[Dict[str, String]] = Field(
        None,
        description='Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.',
    )
    IdempotencyToken: Optional[str] = Field(
        None,
        description='A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>CreateFrameworkInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.',
    )


class AuditFrameworksFrameworkNamePutRequest(BaseModel):
    FrameworkControls: Optional[List[FrameworkControl]] = Field(
        None,
        description='A list of the controls that make up the framework. Each control in the list has a name, input parameters, and scope.',
    )
    FrameworkDescription: Optional[
        constr(pattern=r'.*\S.*', min_length=0, max_length=1024)
    ] = Field(
        None,
        description='An optional description of the framework with a maximum 1,024 characters.',
    )
    IdempotencyToken: Optional[str] = Field(
        None,
        description='A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>UpdateFrameworkInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.',
    )


class ReportDeliveryChannel1(BaseModel):
    Formats: Optional[FormatList] = None
    S3BucketName: Optional[String] = None
    S3KeyPrefix: Optional[String] = None


class AuditReportPlansPostRequest(BaseModel):
    IdempotencyToken: Optional[str] = Field(
        None,
        description='A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>CreateReportPlanInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.',
    )
    ReportDeliveryChannel: ReportDeliveryChannel1 = Field(
        ...,
        description='Contains information from your report plan about where to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.',
    )
    ReportPlanDescription: Optional[
        constr(pattern=r'.*\S.*', min_length=0, max_length=1024)
    ] = Field(
        None,
        description='An optional description of the report plan with a maximum of 1,024 characters.',
    )
    ReportPlanName: constr(
        pattern=r'[a-zA-Z][_a-zA-Z0-9]*', min_length=1, max_length=256
    ) = Field(
        ...,
        description='The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).',
    )
    ReportPlanTags: Optional[Dict[str, String]] = Field(
        None,
        description='Metadata that you can assign to help organize the report plans that you create. Each tag is a key-value pair.',
    )
    ReportSetting: ReportSetting1 = Field(
        ..., description='Contains detailed information about a report setting.'
    )


class AuditReportPlansReportPlanNamePutRequest(BaseModel):
    IdempotencyToken: Optional[str] = Field(
        None,
        description='A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>UpdateReportPlanInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.',
    )
    ReportDeliveryChannel: Optional[ReportDeliveryChannel1] = Field(
        None,
        description='Contains information from your report plan about where to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.',
    )
    ReportPlanDescription: Optional[
        constr(pattern=r'.*\S.*', min_length=0, max_length=1024)
    ] = Field(
        None,
        description='An optional description of the report plan with a maximum 1,024 characters.',
    )
    ReportSetting: Optional[ReportSetting1] = Field(
        None, description='Contains detailed information about a report setting.'
    )


class BackupSelection1(BaseModel):
    Conditions_1: Optional[Conditions] = Field(None, alias='Conditions')
    IamRoleArn: Optional[IAMRoleArn] = None
    ListOfTags_1: Optional[ListOfTags] = Field(None, alias='ListOfTags')
    NotResources: Optional[ResourceArns] = None
    Resources: Optional[ResourceArns] = None
    SelectionName: Optional[BackupSelectionName] = None


class BackupPlansBackupPlanIdSelectionsPutRequest(BaseModel):
    BackupSelection: BackupSelection1 = Field(
        ...,
        description='<p>Used to specify a set of resources to a backup plan.</p> <p>Specifying your desired <code>Conditions</code>, <code>ListOfTags</code>, <code>NotResources</code>, and/or <code>Resources</code> is recommended. If none of these are specified, Backup will attempt to select all supported and opted-in storage resources, which could have unintended cost implications.</p>',
    )
    CreatorRequestId: Optional[str] = Field(
        None,
        description="<p>A unique string that identifies the request and allows failed requests to be retried without the risk of running the operation twice. This parameter is optional.</p> <p>If used, this parameter must contain 1 to 50 alphanumeric or '-_.' characters.</p>",
    )


class RecoveryPointSelection(BaseModel):
    DateRange_1: Optional[DateRange] = Field(None, alias='DateRange')
    ResourceIdentifiers_1: Optional[ResourceIdentifiers] = Field(
        None, alias='ResourceIdentifiers'
    )
    VaultNames_1: Optional[VaultNames] = Field(None, alias='VaultNames')


class LegalHoldsPostRequest(BaseModel):
    Description: str = Field(
        ..., description='This is the string description of the legal hold.'
    )
    IdempotencyToken: Optional[str] = Field(
        None,
        description='This is a user-chosen string used to distinguish between otherwise identical calls. Retrying a successful request with the same idempotency token results in a success message with no action taken.',
    )
    RecoveryPointSelection_1: Optional[RecoveryPointSelection] = Field(
        None,
        alias='RecoveryPointSelection',
        description='This specifies criteria to assign a set of resources, such as resource types or backup vaults.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='Optional tags to include. A tag is a key-value pair you can use to manage, filter, and search for your resources. Allowed characters include UTF-8 letters, numbers, spaces, and the following characters: + - = . _ : /. ',
    )
    Title: str = Field(..., description='This is the string title of the legal hold.')


class BackupJob(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    BackupJobId: Optional[String] = None
    BackupOptions_1: Optional[BackupOptions] = Field(None, alias='BackupOptions')
    BackupSizeInBytes: Optional[Long] = None
    BackupType: Optional[String] = None
    BackupVaultArn: Optional[ARN] = None
    BackupVaultName_1: Optional[BackupVaultName] = Field(None, alias='BackupVaultName')
    BytesTransferred: Optional[Long] = None
    CompletionDate: Optional[Timestamp] = None
    CreatedBy: Optional[RecoveryPointCreator] = None
    CreationDate: Optional[Timestamp] = None
    ExpectedCompletionDate: Optional[Timestamp] = None
    IamRoleArn: Optional[IAMRoleArn] = None
    IsParent: Optional[Boolean] = None
    ParentJobId: Optional[String] = None
    PercentDone: Optional[String] = None
    RecoveryPointArn: Optional[ARN] = None
    ResourceArn: Optional[ARN] = None
    ResourceName: Optional[String] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    StartBy: Optional[Timestamp] = None
    State: Optional[BackupJobState] = None
    StatusMessage: Optional[String] = None


class BackupJobsList(RootModel[List[BackupJob]]):
    root: List[BackupJob]


class BackupPlanTemplatesList(RootModel[List[BackupPlanTemplatesListMember]]):
    root: List[BackupPlanTemplatesListMember]


class BackupPlanVersionsList(RootModel[List[BackupPlansListMember]]):
    root: List[BackupPlansListMember]


class BackupPlansList(RootModel[List[BackupPlansListMember]]):
    root: List[BackupPlansListMember]


class BackupSelection(BaseModel):
    Conditions_1: Optional[Conditions] = Field(None, alias='Conditions')
    IamRoleArn: IAMRoleArn
    ListOfTags_1: Optional[ListOfTags] = Field(None, alias='ListOfTags')
    NotResources: Optional[ResourceArns] = None
    Resources: Optional[ResourceArns] = None
    SelectionName: BackupSelectionName


class BackupSelectionsList(RootModel[List[BackupSelectionsListMember]]):
    root: List[BackupSelectionsListMember]


class BackupVaultList(RootModel[List[BackupVaultListMember]]):
    root: List[BackupVaultListMember]


class CopyAction(BaseModel):
    DestinationBackupVaultArn: ARN
    Lifecycle_1: Optional[Lifecycle] = Field(None, alias='Lifecycle')


class CopyActions(RootModel[List[CopyAction]]):
    root: List[CopyAction]


class CopyJob(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    BackupSizeInBytes: Optional[Long] = None
    ChildJobsInState: Optional[CopyJobChildJobsInState] = None
    CompletionDate: Optional[Timestamp] = None
    CompositeMemberIdentifier: Optional[String] = None
    CopyJobId: Optional[String] = None
    CreatedBy: Optional[RecoveryPointCreator] = None
    CreationDate: Optional[Timestamp] = None
    DestinationBackupVaultArn: Optional[ARN] = None
    DestinationRecoveryPointArn: Optional[ARN] = None
    IamRoleArn: Optional[IAMRoleArn] = None
    IsParent: Optional[Boolean] = None
    NumberOfChildJobs: Optional[Long] = None
    ParentJobId: Optional[String] = None
    ResourceArn: Optional[ARN] = None
    ResourceName: Optional[String] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    SourceBackupVaultArn: Optional[ARN] = None
    SourceRecoveryPointArn: Optional[ARN] = None
    State: Optional[CopyJobState] = None
    StatusMessage: Optional[String] = None


class CopyJobsList(RootModel[List[CopyJob]]):
    root: List[CopyJob]


class CreateBackupSelectionInput(BaseModel):
    BackupSelection_1: BackupSelection = Field(..., alias='BackupSelection')
    CreatorRequestId: Optional[String] = None


class CreateFrameworkInput(BaseModel):
    FrameworkControls_1: FrameworkControls = Field(..., alias='FrameworkControls')
    FrameworkDescription_1: Optional[FrameworkDescription] = Field(
        None, alias='FrameworkDescription'
    )
    FrameworkName_1: FrameworkName = Field(..., alias='FrameworkName')
    FrameworkTags: Optional[StringMap] = None
    IdempotencyToken: Optional[String] = None


class CreateReportPlanInput(BaseModel):
    IdempotencyToken: Optional[String] = None
    ReportDeliveryChannel_1: ReportDeliveryChannel = Field(
        ..., alias='ReportDeliveryChannel'
    )
    ReportPlanDescription_1: Optional[ReportPlanDescription] = Field(
        None, alias='ReportPlanDescription'
    )
    ReportPlanName_1: ReportPlanName = Field(..., alias='ReportPlanName')
    ReportPlanTags: Optional[StringMap] = None
    ReportSetting_1: ReportSetting = Field(..., alias='ReportSetting')


class DescribeBackupJobOutput(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    BackupJobId: Optional[String] = None
    BackupOptions_1: Optional[BackupOptions] = Field(None, alias='BackupOptions')
    BackupSizeInBytes: Optional[Long] = None
    BackupType: Optional[String] = None
    BackupVaultArn: Optional[ARN] = None
    BackupVaultName_1: Optional[BackupVaultName] = Field(None, alias='BackupVaultName')
    BytesTransferred: Optional[Long] = None
    ChildJobsInState: Optional[BackupJobChildJobsInState] = None
    CompletionDate: Optional[Timestamp] = None
    CreatedBy: Optional[RecoveryPointCreator] = None
    CreationDate: Optional[Timestamp] = None
    ExpectedCompletionDate: Optional[Timestamp] = None
    IamRoleArn: Optional[IAMRoleArn] = None
    IsParent: Optional[Boolean] = None
    NumberOfChildJobs: Optional[Long] = None
    ParentJobId: Optional[String] = None
    PercentDone: Optional[String] = None
    RecoveryPointArn: Optional[ARN] = None
    ResourceArn: Optional[ARN] = None
    ResourceName: Optional[String] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    StartBy: Optional[Timestamp] = None
    State: Optional[BackupJobState] = None
    StatusMessage: Optional[String] = None


class DescribeCopyJobOutput(BaseModel):
    CopyJob_1: Optional[CopyJob] = Field(None, alias='CopyJob')


class DescribeFrameworkOutput(BaseModel):
    CreationTime: Optional[Timestamp] = None
    DeploymentStatus: Optional[String] = None
    FrameworkArn: Optional[ARN] = None
    FrameworkControls_1: Optional[FrameworkControls] = Field(
        None, alias='FrameworkControls'
    )
    FrameworkDescription_1: Optional[FrameworkDescription] = Field(
        None, alias='FrameworkDescription'
    )
    FrameworkName_1: Optional[FrameworkName] = Field(None, alias='FrameworkName')
    FrameworkStatus: Optional[String] = None
    IdempotencyToken: Optional[String] = None


class DescribeGlobalSettingsOutput(BaseModel):
    GlobalSettings_1: Optional[GlobalSettings] = Field(None, alias='GlobalSettings')
    LastUpdateTime: Optional[Timestamp] = None


class DescribeRecoveryPointOutput(BaseModel):
    BackupSizeInBytes: Optional[Long] = None
    BackupVaultArn: Optional[ARN] = None
    BackupVaultName_1: Optional[BackupVaultName] = Field(None, alias='BackupVaultName')
    CalculatedLifecycle_1: Optional[CalculatedLifecycle] = Field(
        None, alias='CalculatedLifecycle'
    )
    CompletionDate: Optional[Timestamp] = None
    CompositeMemberIdentifier: Optional[String] = None
    CreatedBy: Optional[RecoveryPointCreator] = None
    CreationDate: Optional[Timestamp] = None
    EncryptionKeyArn: Optional[ARN] = None
    IamRoleArn: Optional[IAMRoleArn] = None
    IsEncrypted: Optional[Boolean] = None
    IsParent: Optional[Boolean] = None
    LastRestoreTime: Optional[Timestamp] = None
    Lifecycle_1: Optional[Lifecycle] = Field(None, alias='Lifecycle')
    ParentRecoveryPointArn: Optional[ARN] = None
    RecoveryPointArn: Optional[ARN] = None
    ResourceArn: Optional[ARN] = None
    ResourceName: Optional[String] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    SourceBackupVaultArn: Optional[ARN] = None
    Status: Optional[RecoveryPointStatus] = None
    StatusMessage: Optional[String] = None
    StorageClass_1: Optional[StorageClass] = Field(None, alias='StorageClass')


class DescribeReportJobOutput(BaseModel):
    ReportJob_1: Optional[ReportJob] = Field(None, alias='ReportJob')


class GetBackupSelectionOutput(BaseModel):
    BackupPlanId: Optional[String] = None
    BackupSelection_1: Optional[BackupSelection] = Field(None, alias='BackupSelection')
    CreationDate: Optional[Timestamp] = None
    CreatorRequestId: Optional[String] = None
    SelectionId: Optional[String] = None


class GetRecoveryPointRestoreMetadataOutput(BaseModel):
    BackupVaultArn: Optional[ARN] = None
    RecoveryPointArn: Optional[ARN] = None
    RestoreMetadata: Optional[Metadata] = None


class ListBackupJobsOutput(BaseModel):
    BackupJobs: Optional[BackupJobsList] = None
    NextToken: Optional[String] = None


class ListBackupPlanTemplatesOutput(BaseModel):
    BackupPlanTemplatesList_1: Optional[BackupPlanTemplatesList] = Field(
        None, alias='BackupPlanTemplatesList'
    )
    NextToken: Optional[String] = None


class ListBackupPlanVersionsOutput(BaseModel):
    BackupPlanVersionsList_1: Optional[BackupPlanVersionsList] = Field(
        None, alias='BackupPlanVersionsList'
    )
    NextToken: Optional[String] = None


class ListBackupPlansOutput(BaseModel):
    BackupPlansList_1: Optional[BackupPlansList] = Field(None, alias='BackupPlansList')
    NextToken: Optional[String] = None


class ListBackupSelectionsOutput(BaseModel):
    BackupSelectionsList_1: Optional[BackupSelectionsList] = Field(
        None, alias='BackupSelectionsList'
    )
    NextToken: Optional[String] = None


class ListBackupVaultsOutput(BaseModel):
    BackupVaultList_1: Optional[BackupVaultList] = Field(None, alias='BackupVaultList')
    NextToken: Optional[String] = None


class ListCopyJobsOutput(BaseModel):
    CopyJobs: Optional[CopyJobsList] = None
    NextToken: Optional[String] = None


class ListProtectedResourcesOutput(BaseModel):
    NextToken: Optional[String] = None
    Results: Optional[ProtectedResourcesList] = None


class ListRecoveryPointsByResourceOutput(BaseModel):
    NextToken: Optional[String] = None
    RecoveryPoints: Optional[RecoveryPointByResourceList] = None


class ListReportJobsOutput(BaseModel):
    NextToken: Optional[String] = None
    ReportJobs: Optional[ReportJobList] = None


class RecoveryPointByBackupVault(BaseModel):
    BackupSizeInBytes: Optional[Long] = None
    BackupVaultArn: Optional[ARN] = None
    BackupVaultName_1: Optional[BackupVaultName] = Field(None, alias='BackupVaultName')
    CalculatedLifecycle_1: Optional[CalculatedLifecycle] = Field(
        None, alias='CalculatedLifecycle'
    )
    CompletionDate: Optional[Timestamp] = None
    CompositeMemberIdentifier: Optional[String] = None
    CreatedBy: Optional[RecoveryPointCreator] = None
    CreationDate: Optional[Timestamp] = None
    EncryptionKeyArn: Optional[ARN] = None
    IamRoleArn: Optional[IAMRoleArn] = None
    IsEncrypted: Optional[Boolean] = None
    IsParent: Optional[Boolean] = None
    LastRestoreTime: Optional[Timestamp] = None
    Lifecycle_1: Optional[Lifecycle] = Field(None, alias='Lifecycle')
    ParentRecoveryPointArn: Optional[ARN] = None
    RecoveryPointArn: Optional[ARN] = None
    ResourceArn: Optional[ARN] = None
    ResourceName: Optional[String] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    SourceBackupVaultArn: Optional[ARN] = None
    Status: Optional[RecoveryPointStatus] = None
    StatusMessage: Optional[String] = None


class RecoveryPointByBackupVaultList(RootModel[List[RecoveryPointByBackupVault]]):
    root: List[RecoveryPointByBackupVault]


class ReportPlan(BaseModel):
    CreationTime: Optional[Timestamp] = None
    DeploymentStatus: Optional[String] = None
    LastAttemptedExecutionTime: Optional[Timestamp] = None
    LastSuccessfulExecutionTime: Optional[Timestamp] = None
    ReportDeliveryChannel_1: Optional[ReportDeliveryChannel] = Field(
        None, alias='ReportDeliveryChannel'
    )
    ReportPlanArn: Optional[ARN] = None
    ReportPlanDescription_1: Optional[ReportPlanDescription] = Field(
        None, alias='ReportPlanDescription'
    )
    ReportPlanName_1: Optional[ReportPlanName] = Field(None, alias='ReportPlanName')
    ReportSetting_1: Optional[ReportSetting] = Field(None, alias='ReportSetting')


class ReportPlanList(RootModel[List[ReportPlan]]):
    root: List[ReportPlan]


class RestoreJobsList(RootModel[List[RestoreJobsListMember]]):
    root: List[RestoreJobsListMember]


class BackupRule(BaseModel):
    CompletionWindowMinutes: Optional[WindowMinutes] = None
    CopyActions_1: Optional[CopyActions] = Field(None, alias='CopyActions')
    EnableContinuousBackup: Optional[Boolean] = None
    Lifecycle_1: Optional[Lifecycle] = Field(None, alias='Lifecycle')
    RecoveryPointTags: Optional[Tags] = None
    RuleId: Optional[String] = None
    RuleName: BackupRuleName
    ScheduleExpression: Optional[CronExpression] = None
    StartWindowMinutes: Optional[WindowMinutes] = None
    TargetBackupVaultName: BackupVaultName


class BackupRuleInput(BaseModel):
    CompletionWindowMinutes: Optional[WindowMinutes] = None
    CopyActions_1: Optional[CopyActions] = Field(None, alias='CopyActions')
    EnableContinuousBackup: Optional[Boolean] = None
    Lifecycle_1: Optional[Lifecycle] = Field(None, alias='Lifecycle')
    RecoveryPointTags: Optional[Tags] = None
    RuleName: BackupRuleName
    ScheduleExpression: Optional[CronExpression] = None
    StartWindowMinutes: Optional[WindowMinutes] = None
    TargetBackupVaultName: BackupVaultName


class BackupRules(RootModel[List[BackupRule]]):
    root: List[BackupRule]


class BackupRulesInput(RootModel[List[BackupRuleInput]]):
    root: List[BackupRuleInput]


class CreateLegalHoldInput(BaseModel):
    Description: String
    IdempotencyToken: Optional[String] = None
    RecoveryPointSelection_1: Optional[RecoveryPointSelection] = Field(
        None, alias='RecoveryPointSelection'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Title: String


class CreateLegalHoldOutput(BaseModel):
    CreationDate: Optional[Timestamp] = None
    Description: Optional[String] = None
    LegalHoldArn: Optional[ARN] = None
    LegalHoldId: Optional[String] = None
    RecoveryPointSelection_1: Optional[RecoveryPointSelection] = Field(
        None, alias='RecoveryPointSelection'
    )
    Status: Optional[LegalHoldStatus] = None
    Title: Optional[String] = None


class DescribeReportPlanOutput(BaseModel):
    ReportPlan_1: Optional[ReportPlan] = Field(None, alias='ReportPlan')


class GetLegalHoldOutput(BaseModel):
    CancelDescription: Optional[String] = None
    CancellationDate: Optional[Timestamp] = None
    CreationDate: Optional[Timestamp] = None
    Description: Optional[String] = None
    LegalHoldArn: Optional[ARN] = None
    LegalHoldId: Optional[String] = None
    RecoveryPointSelection_1: Optional[RecoveryPointSelection] = Field(
        None, alias='RecoveryPointSelection'
    )
    RetainRecordUntil: Optional[Timestamp] = None
    Status: Optional[LegalHoldStatus] = None
    Title: Optional[String] = None


class ListRecoveryPointsByBackupVaultOutput(BaseModel):
    NextToken: Optional[String] = None
    RecoveryPoints: Optional[RecoveryPointByBackupVaultList] = None


class ListReportPlansOutput(BaseModel):
    NextToken: Optional[String] = None
    ReportPlans: Optional[ReportPlanList] = None


class ListRestoreJobsOutput(BaseModel):
    NextToken: Optional[String] = None
    RestoreJobs: Optional[RestoreJobsList] = None


class BackupPlan1(BaseModel):
    AdvancedBackupSettings_1: Optional[AdvancedBackupSettings] = Field(
        None, alias='AdvancedBackupSettings'
    )
    BackupPlanName_1: Optional[BackupPlanName] = Field(None, alias='BackupPlanName')
    Rules: Optional[BackupRulesInput] = None


class BackupPlansPutRequest(BaseModel):
    BackupPlan: BackupPlan1 = Field(
        ...,
        description='Contains an optional backup plan display name and an array of <code>BackupRule</code> objects, each of which specifies a backup rule. Each rule in a backup plan is a separate scheduled task. ',
    )
    BackupPlanTags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='To help organize your resources, you can assign your own metadata to the resources that you create. Each tag is a key-value pair. The specified tags are assigned to all backups created with this plan.',
    )
    CreatorRequestId: Optional[str] = Field(
        None,
        description="<p>Identifies the request and allows failed requests to be retried without the risk of running the operation twice. If the request includes a <code>CreatorRequestId</code> that matches an existing backup plan, that plan is returned. This parameter is optional.</p> <p>If used, this parameter must contain 1 to 50 alphanumeric or '-_.' characters.</p>",
    )


class BackupPlansBackupPlanIdPostRequest(BaseModel):
    BackupPlan: BackupPlan1 = Field(
        ...,
        description='Contains an optional backup plan display name and an array of <code>BackupRule</code> objects, each of which specifies a backup rule. Each rule in a backup plan is a separate scheduled task. ',
    )


class BackupPlan(BaseModel):
    AdvancedBackupSettings_1: Optional[AdvancedBackupSettings] = Field(
        None, alias='AdvancedBackupSettings'
    )
    BackupPlanName_1: BackupPlanName = Field(..., alias='BackupPlanName')
    Rules: BackupRules


class BackupPlanInput(BaseModel):
    AdvancedBackupSettings_1: Optional[AdvancedBackupSettings] = Field(
        None, alias='AdvancedBackupSettings'
    )
    BackupPlanName_1: BackupPlanName = Field(..., alias='BackupPlanName')
    Rules: BackupRulesInput


class CreateBackupPlanInput(BaseModel):
    BackupPlan: BackupPlanInput
    BackupPlanTags: Optional[Tags] = None
    CreatorRequestId: Optional[String] = None


class GetBackupPlanFromJSONOutput(BaseModel):
    BackupPlan_1: Optional[BackupPlan] = Field(None, alias='BackupPlan')


class GetBackupPlanFromTemplateOutput(BaseModel):
    BackupPlanDocument: Optional[BackupPlan] = None


class GetBackupPlanOutput(BaseModel):
    AdvancedBackupSettings_1: Optional[AdvancedBackupSettings] = Field(
        None, alias='AdvancedBackupSettings'
    )
    BackupPlan_1: Optional[BackupPlan] = Field(None, alias='BackupPlan')
    BackupPlanArn: Optional[ARN] = None
    BackupPlanId: Optional[String] = None
    CreationDate: Optional[Timestamp] = None
    CreatorRequestId: Optional[String] = None
    DeletionDate: Optional[Timestamp] = None
    LastExecutionDate: Optional[Timestamp] = None
    VersionId: Optional[String] = None


class UpdateBackupPlanInput(BaseModel):
    BackupPlan: BackupPlanInput
